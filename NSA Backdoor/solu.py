'''
https://medium.com/@hva314/some-basic-rsa-challenges-in-ctf-part-1-some-basic-math-on-rsa-5663fa337c27
## https://github.com/jinscoe123/dph  
# https://www.cryptologie.net/article/360/how-to-backdoor-diffie-hellman-quick-explanation/
# https://www.cryptologie.net/article/330/how-to-backdoor-diffie-hellman-lessons-learned-from-the-socat-non-prime-prime/
# https://eprint.iacr.org/2016/644.pdf
'''

from binascii import hexlify, unhexlify
from libnum import * 
from Crypto.Util.number import long_to_bytes, bytes_to_long, inverse

n_hex = 0xd63c7cb032ae4d3a43ecec4999cfa8f8b49aa9c14374e60f3beeb437233e44f988a73101f9b20ffb56454350b1c9032c136142220ded059876ccfde992551db46c27f122cacdd38c86acb844032f8600515aa6ccb7a1d1ac62d04b51b752476d2d6ee9f22d0f933bebdd833a71fd30510479fcc7ba0afb1d4b0a1622cdc2a48341010dffdcfc8d9af45959fb30b692dc2c9e181ac6bcd6a701326e3707fb19b7f9dfe1c522c68f9b0d229d384be1e1c58f72f8df60ca5172a341a7ee81428a064beedd6af7b89cc6079f2b6d3717f0d29330f0a70acca05bf67ab60c2e5cb0b86bfca2c9b8d50d79d24371432a1efb243f3c5f15b377ccc51f6e69bfbf5ecc61
n_int = 27044824545459824170172462046624469149839988729482903000866077463858581968302391237061838941863617686373739195956654940950404316372572301163073008926639295418452850201468233123058818638945043537976493897572790697586684891124202065992951555203422694502715986091661936138469341628528903315561218742089780278392615563680232778417616604951914597012360439698461426063921322467934972265740559061376852718246325368331489723907848745386256306941290438548606432041922654793464928871579978465334742621334599875120878389468342698341929776741824339242184926482468507437987118823657002151355342992180523619494867737910999548611681

h_hex = 0x51099773fd2aafd5f84dfe649acbb3558797f58bdc643ac6ee6f0a6fa30031767966316201c36be69241d9d05d0bd181ced13809f57b0c0594f6b29ac74bc7906dae70a2808799feddc71cf5b28401100e5e7e0324b9d8b56e540c725fa4ef87b9e8d0f901630da5f7f181f6d5b4cdc00d5f5c3457674abcb0d0c173f381b92bdfb143c595f024b98b9900410d502c87dfc1633796d640cb5f780fa4b6f0414fb51e34700d9096caf07b36f4dcd3bb5a2d126f60d3a802959d6fadf18f4970756f3099e14fa6386513fb8e6cdda80fdc1c32a10f6cdb197857caf1d7abf3812e3d9dcda106fa87bac382d3e6fc216c55da02a0c45a482550acb2f58bea2cfa03
h_int = 10230032503199327401627250197724560775036794598711422665723109931676519461895914673194564237493916409402558127512886358873803179536380707057619495689636200687781954441142174029241144881327227202661664191310764629981802657920761688261004112252169112426965031045536336715452675037702961365337153084172783532803944620209595563642571571582446196525253936276114792293498364692848661775627038690031115596892209486013286807489946833754362053483783351963874845312871919843366223439690687364781525787508405007854160604940091661277136966835886272138480439484770420207321578040718683150104120608394567288448245169695693978008067

g = 3

p_hex = '0xe823cd272413ba5dbc8ade057120e2488345eea930e0b42f97d949c36e29218c2760059fef64d97da2a06144cb72e6451260d7e8f6d3cb78641131bdc2c8c09dc4f9395e0b1e9ac20d1266c9058b8c0e22ec7071236b1ab559188ed23de93213af1819453419f2108b453d3c9342e99a5a16e68acfe19b69af4b58b019a70047'
p_int = 163014145749020966527362866473385169718851721616099580892964038460874458300229566597051127131837727765676578472743831728487190199884657664763105462749319055787715119759660870245251139666933894434217213010123667901776317139730147215838019956603683024166830240694839515087101545941555671169130305164821949513799

q_hex = '0xec4198b499d71ea60b224a4a9f0f04576fa8fd36485e05fd79a6ff1527be325a7a598341bbbedcd728b745525cc4b569f91a631ef74ee44f319e5f4d38bf3b9cb3d14b1a6e629553b831987695d0976a76a24860a23a7ebec42cbe41c625c8013e174ce1d19804e4b7111d8adab1a4690b5341c5897fcd33163077f07a4d0a17'
q_int = 165904771154636133744258537155010957898841320976199637310247946276091086685264203988382040434355973963755682908150999129715814054881305005279715109357952947956732031939179558028421896612221813299929875548130332311862653487519381871784418328675201518221252865046296276946334529508065441554563296058286139050519

p_factors = [2, 37463, 40841, 66301, 69761, 70271, 70709, 70793, 71011, 71119, 71837, 71999, 72577, 72613, 74017, 75079, 76481, 77471, 79181, 79687, 80737, 86239, 86257, 86453, 86627, 86923, 88721, 89917, 90499, 91957, 92143, 93479, 94201, 94723, 95911, 96097, 96731, 98963, 99923, 100279, 101267, 101429, 101573, 106031, 110069, 113749, 119027, 119869, 120193, 122599, 122819, 122827, 124277, 124739, 125863, 125921, 127703, 127763, 128747, 129169, 129527, 130639, 131009]
q_factors = [2, 32969, 33199, 33871, 34057, 34337, 34747, 35023, 35069, 35291, 36353, 36467, 36479, 36571, 36653, 36833, 37277, 38501, 38677, 39313, 39397, 39443, 39581, 41411, 41953, 42533, 43261, 43313, 43591, 43987, 44449, 44729, 44771, 46153, 46439, 47869, 47933, 48073, 48109, 48337, 48847, 50153, 50821, 51307, 53419, 53479, 53527, 53773, 55339, 55987, 56501, 57037, 58511, 58787, 59149, 59509, 59651, 60127, 60509, 60757, 60859, 61211, 61403, 61949, 62233, 63059, 65537]

p_factors_hex = ['0x2', '0x9257', '0x9f89', '0x102fd', '0x11081', '0x1127f', '0x11435', '0x11489', '0x11563', '0x115cf', '0x1189d', '0x1193f', '0x11b81', '0x11ba5', '0x12121', '0x12547', '0x12ac1', '0x12e9f', '0x1354d', '0x13747', '0x13b61', '0x150df', '0x150f1', '0x151b5', '0x15263', '0x1538b', '0x15a91', '0x15f3d', '0x16183', '0x16735', '0x167ef', '0x16d27', '0x16ff9', '0x17203', '0x176a7', '0x17761', '0x179db', '0x18293', '0x18653', '0x187b7', '0x18b93', '0x18c35', '0x18cc5', '0x19e2f', '0x1adf5', '0x1bc55', '0x1d0f3', '0x1d43d', '0x1d581', '0x1dee7', '0x1dfc3', '0x1dfcb', '0x1e575', '0x1e743', '0x1eba7', '0x1ebe1', '0x1f2d7', '0x1f313', '0x1f6eb', '0x1f891', '0x1f9f7', '0x1fe4f', '0x1ffc1']
q_factors_hex = ['0x2', '0x80c9', '0x81af', '0x844f', '0x8509', '0x8621', '0x87bb', '0x88cf', '0x88fd', '0x89db', '0x8e01', '0x8e73', '0x8e7f', '0x8edb', '0x8f2d', '0x8fe1', '0x919d', '0x9665', '0x9715', '0x9991', '0x99e5', '0x9a13', '0x9a9d', '0xa1c3', '0xa3e1', '0xa625', '0xa8fd', '0xa931', '0xaa47', '0xabd3', '0xada1', '0xaeb9', '0xaee3', '0xb449', '0xb567', '0xbafd', '0xbb3d', '0xbbc9', '0xbbed', '0xbcd1', '0xbecf', '0xc3e9', '0xc685', '0xc86b', '0xd0ab', '0xd0e7', '0xd117', '0xd20d', '0xd82b', '0xdab3', '0xdcb5', '0xdecd', '0xe48f', '0xe5a3', '0xe70d', '0xe875', '0xe903', '0xeadf', '0xec5d', '0xed55', '0xedbb', '0xef1b', '0xefdb', '0xf1fd', '0xf319', '0xf653', '0x10001']


# print(n2s(int("0x21c827bb4d225c0349af4c6be2dc42b5cbe73e0bf63233ded521e51b8c766415368304b5b6c385902741895083492970cf09b10cdd28f9cd32fc9d24bfbb2f5ae078d9fc25ef309f0d4c2d791526c4ae27268817986805d4a31a0702f1fb7dee309fd7e3f2fdd2d6eff2265356a5258531276611f5588ad671d7abcc015d555d", 0)))
# print(unhexlify('0x21c827bb4d225c0349af4c6be2dc42b5cbe73e0bf63233ded521e51b8c766415368304b5b6c385902741895083492970cf09b10cdd28f9cd32fc9d24bfbb2f5ae078d9fc25ef309f0d4c2d791526c4ae27268817986805d4a31a0702f1fb7dee309fd7e3f2fdd2d6eff2265356a5258531276611f5588ad671d7abcc015d555d'[2:]))


'''
python3 -m dph exp \0x2,0x9257,0x9f89,0x102fd,0x11081,0x1127f,0x11435,0x11489,0x11563,0x115cf,0x1189d,0x1193f,0x11b81,0x11ba5,0x12121,0x12547,0x12ac1,0x12e9f,0x1354d,0x13747,0x13b61,0x150df,0x150f1,0x151b5,0x15263,0x1538b,0x15a91,0x15f3d,0x16183,0x16735,0x167ef,0x16d27,0x16ff9,0x17203,0x176a7,0x17761,0x179db,0x18293,0x18653,0x187b7,0x18b93,0x18c35,0x18cc5,0x19e2f,0x1adf5,0x1bc55,0x1d0f3,0x1d43d,0x1d581,0x1dee7,0x1dfc3,0x1dfcb,0x1e575,0x1e743,0x1eba7,0x1ebe1,0x1f2d7,0x1f313,0x1f6eb,0x1f891,0x1f9f7,0x1fe4f,0x1ffc1 \0x2,0x80c9,0x81af,0x844f,0x8509,0x8621,0x87bb,0x88cf,0x88fd,0x89db,0x8e01,0x8e73,0x8e7f,0x8edb,0x8f2d,0x8fe1,0x919d,0x9665,0x9715,0x9991,0x99e5,0x9a13,0x9a9d,0xa1c3,0xa3e1,0xa625,0xa8fd,0xa931,0xaa47,0xabd3,0xada1,0xaeb9,0xaee3,0xb449,0xb567,0xbafd,0xbb3d,0xbbc9,0xbbed,0xbcd1,0xbecf,0xc3e9,0xc685,0xc86b,0xd0ab,0xd0e7,0xd117,0xd20d,0xd82b,0xdab3,0xdcb5,0xdecd,0xe48f,0xe5a3,0xe70d,0xe875,0xe903,0xeadf,0xec5d,0xed55,0xedbb,0xef1b,0xefdb,0xf1fd,0xf319,0xf653,0x10001 \ 3 \ 0x51099773fd2aafd5f84dfe649acbb3558797f58bdc643ac6ee6f0a6fa30031767966316201c36be69241d9d05d0bd181ced13809f57b0c0594f6b29ac74bc7906dae70a2808799feddc71cf5b28401100e5e7e0324b9d8b56e540c725fa4ef87b9e8d0f901630da5f7f181f6d5b4cdc00d5f5c3457674abcb0d0c173f381b92bdfb143c595f024b98b9900410d502c87dfc1633796d640cb5f780fa4b6f0414fb51e34700d9096caf07b36f4dcd3bb5a2d126f60d3a802959d6fadf18f4970756f3099e14fa6386513fb8e6cdda80fdc1c32a10f6cdb197857caf1d7abf3812e3d9dcda106fa87bac382d3e6fc216c55da02a0c45a482550acb2f58bea2cfa03

'''


'''
F = IntegerModRing(n_int)

a = discrete_log(F(int(h, 0)), F(g))

print(str(IntegerModRing(n_int)(g)**(a)))

'''

'''
# Solution
g = 3
h = 10230032503199327401627250197724560775036794598711422665723109931676519461895914673194564237493916409402558127512886358873803179536380707057619495689636200687781954441142174029241144881327227202661664191310764629981802657920761688261004112252169112426965031045536336715452675037702961365337153084172783532803944620209595563642571571582446196525253936276114792293498364692848661775627038690031115596892209486013286807489946833754362053483783351963874845312871919843366223439690687364781525787508405007854160604940091661277136966835886272138480439484770420207321578040718683150104120608394567288448245169695693978008067
q = 165904771154636133744258537155010957898841320976199637310247946276091086685264203988382040434355973963755682908150999129715814054881305005279715109357952947956732031939179558028421896612221813299929875548130332311862653487519381871784418328675201518221252865046296276946334529508065441554563296058286139050519
R = IntegerModRing(q)
x = discrete_log(R(h), R(g))
print(long_to_bytes(x))

'''